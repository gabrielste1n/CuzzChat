package cuzzchat;

import java.awt.event.ActionEvent;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

/**
 *
 * @author gabri
 */
public final class clientGUI extends javax.swing.JFrame
{

    /**
     * Creates new form clientGUI
     */
    static Client currentClient;
    DefaultListModel<String> listModel = new DefaultListModel<String>();

    String chattingPartner = "";
    String selectedFileName = "";
    String receivedFileName = "";
    long receivedFileSize;
    File file;

    public clientGUI()
    {
        initComponents();
        setLocationRelativeTo(null);
        // SET LIST MODEL
        clientList.setModel(listModel);

        attachedFileDisplay.setVisible(false);
        messageDelivered.setVisible(false);

        // CREATE NEW CLIENT TO CONNECT TO SERVER                      
        try
        {
            currentClient = new Client(new String[]
            {
                "Cuzzy"
            });
        }
        catch (IOException ex)
        {
            Logger.getLogger(clientGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        currentClient.sendMessage("getUsername");
        // START LOOKING FOR MESSAGES FROM SERVER
        lookForResponse();
        clientInput.addActionListener(action);

        Runtime.getRuntime().addShutdownHook(logout);

    }

    public JTextField getClientInput()
    {
        return clientInput;
    }

    public JTextArea getChatArea()
    {
        return chatArea;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        chatArea = new javax.swing.JTextArea();
        clientInput = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        connectionRequest = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        clientList = new javax.swing.JList();
        attach = new javax.swing.JLabel();
        send = new javax.swing.JLabel();
        attachedFileDisplay = new javax.swing.JLabel();
        messageDelivered = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(861, 425));

        chatArea.setEditable(false);
        chatArea.setColumns(20);
        chatArea.setRows(5);
        chatArea.setRequestFocusEnabled(false);
        jScrollPane1.setViewportView(chatArea);

        clientInput.setSelectionColor(new java.awt.Color(255, 153, 51));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cuzzchat/logo.PNG"))); // NOI18N

        jPanel2.setBackground(new java.awt.Color(255, 145, 77));

        jLabel2.setFont(new java.awt.Font("Segoe WP Black", 1, 30)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("YOUR CUZZIES");

        connectionRequest.setBackground(new java.awt.Color(255, 204, 51));
        connectionRequest.setFont(new java.awt.Font("Segoe WP Black", 1, 14)); // NOI18N
        connectionRequest.setForeground(new java.awt.Color(255, 255, 255));
        connectionRequest.setText("SEND CONNECTION REQUEST");
        connectionRequest.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        connectionRequest.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseEntered(java.awt.event.MouseEvent evt)
            {
                connectionRequestMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt)
            {
                connectionRequestMouseExited(evt);
            }
        });
        connectionRequest.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                connectionRequestActionPerformed(evt);
            }
        });

        clientList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        clientList.setFocusable(false);
        clientList.setSelectionBackground(new java.awt.Color(255, 222, 89));
        jScrollPane3.setViewportView(clientList);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane3)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(connectionRequest, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(connectionRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        attach.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cuzzchat/attach.png"))); // NOI18N
        attach.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        attach.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                attachMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt)
            {
                attachMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt)
            {
                attachMouseExited(evt);
            }
        });

        send.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cuzzchat/send.png"))); // NOI18N
        send.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        send.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                sendMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt)
            {
                sendMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt)
            {
                sendMouseExited(evt);
            }
        });

        attachedFileDisplay.setBackground(new java.awt.Color(255, 153, 0));
        attachedFileDisplay.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        attachedFileDisplay.setForeground(new java.awt.Color(255, 255, 255));
        attachedFileDisplay.setText(" hello.jpg");
        attachedFileDisplay.setOpaque(true);

        messageDelivered.setBackground(new java.awt.Color(255, 153, 0));
        messageDelivered.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        messageDelivered.setForeground(new java.awt.Color(255, 255, 255));
        messageDelivered.setText(" Message Delivered");
        messageDelivered.setOpaque(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(messageDelivered, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(clientInput, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(attachedFileDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(attach)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(send, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(23, 23, 23))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(messageDelivered, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(attach, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(attachedFileDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clientInput, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(send, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 843, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectionRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectionRequestActionPerformed
        String selectedCuzzy = clientList.getSelectedValue() + "";
        int res = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to send " + selectedCuzzy + " a connection request?");
        if (res == 0)
        {
            currentClient.sendMessage("connectionRequest#" + selectedCuzzy);
        }
    }//GEN-LAST:event_connectionRequestActionPerformed

    private void sendMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sendMouseClicked

        if (!chattingPartner.equals(""))
        {

            if (selectedFileName.equals("") && !clientInput.getText().equals(""))
            {
                chatArea.append("You: " + clientInput.getText() + "\n");
                currentClient.sendMessage("chatMessage#" + clientInput.getText() + "#" + chattingPartner);

            }
            else
            {
                if (!clientInput.getText().equals(""))
                {
                    chatArea.append("You: " + clientInput.getText() + "\n");
                    currentClient.sendMessage("chatMessage#" + clientInput.getText() + "#" + chattingPartner);
                }
                System.out.println("Sent transfer request");
                currentClient.sendMessage("fileTransferRequest#" + format(file.length(),2) + "#" + chattingPartner);
                
            }
            clientInput.setText("");
        }

        attachedFileDisplay.setVisible(false);
        selectedFileName = "";
    }//GEN-LAST:event_sendMouseClicked

    private void attachMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_attachMouseClicked
    {//GEN-HEADEREND:event_attachMouseClicked
        JFileChooser fc = new JFileChooser();
        int option = fc.showOpenDialog(this);
        if (option == JFileChooser.APPROVE_OPTION)
        {

            file = fc.getSelectedFile();
            String filePath = file.getAbsolutePath();
            selectedFileName = file.getName();

            //server statement
            System.out.println("Opening: " + file.getName() + ".");

            attachedFileDisplay.setText(" " + selectedFileName);
            attachedFileDisplay.setVisible(true);

        }
    }//GEN-LAST:event_attachMouseClicked

    private void attachMouseEntered(java.awt.event.MouseEvent evt)//GEN-FIRST:event_attachMouseEntered
    {//GEN-HEADEREND:event_attachMouseEntered
        attach.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cuzzchat/attachHover.PNG")));
    }//GEN-LAST:event_attachMouseEntered

    private void attachMouseExited(java.awt.event.MouseEvent evt)//GEN-FIRST:event_attachMouseExited
    {//GEN-HEADEREND:event_attachMouseExited
        attach.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cuzzchat/attach.png")));
    }//GEN-LAST:event_attachMouseExited

    private void sendMouseEntered(java.awt.event.MouseEvent evt)//GEN-FIRST:event_sendMouseEntered
    {//GEN-HEADEREND:event_sendMouseEntered
       send.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cuzzchat/sendHover.PNG")));
    }//GEN-LAST:event_sendMouseEntered

    private void sendMouseExited(java.awt.event.MouseEvent evt)//GEN-FIRST:event_sendMouseExited
    {//GEN-HEADEREND:event_sendMouseExited
        send.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cuzzchat/send.PNG")));        
    }//GEN-LAST:event_sendMouseExited

    private void connectionRequestMouseEntered(java.awt.event.MouseEvent evt)//GEN-FIRST:event_connectionRequestMouseEntered
    {//GEN-HEADEREND:event_connectionRequestMouseEntered
        connectionRequest.setBackground(new java.awt.Color(255, 222, 89));
    }//GEN-LAST:event_connectionRequestMouseEntered

    private void connectionRequestMouseExited(java.awt.event.MouseEvent evt)//GEN-FIRST:event_connectionRequestMouseExited
    {//GEN-HEADEREND:event_connectionRequestMouseExited
        connectionRequest.setBackground(new java.awt.Color(255,204,51));
    }//GEN-LAST:event_connectionRequestMouseExited

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(clientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(clientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(clientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(clientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new clientGUI().setVisible(true);
            }
        });
    }

    Action action = new AbstractAction()
    {
        @Override
        public void actionPerformed(ActionEvent e)
        {
            if (!chattingPartner.equals(""))
            {
                messageDelivered.setVisible(false);
                chatArea.append("You: " + clientInput.getText() + "\n");
                currentClient.sendMessage("chatMessage#" + clientInput.getText() + "#" + chattingPartner);
                clientInput.setText("");
            }
        }
    };

    public static String format(double bytes, int digits) {
        String[] dictionary = { "bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB" };
        int index = 0;
        for (index = 0; index < dictionary.length; index++) {
            if (bytes < 1024) {
                break;
            }
            bytes = bytes / 1024;
        }
        return String.format("%." + digits + "f", bytes) + dictionary[index];
    }

    public void lookForResponse()
    {
        readMessage.start();
    }

    Thread readMessage = new Thread(new Runnable()
    {
        @Override
        public void run()
        {

            while (true)
            {
                //MESSAGE SENT FROM SERVER TO CLIENT
                String recieved = currentClient.readMessage();

                StringTokenizer st = new StringTokenizer(recieved, "#");

                String dataType = "";
                String message= "";
                String senderName= "";

                if (st.countTokens() == 2)
                {
                    message = st.nextToken();
                    senderName = st.nextToken();
                }
                else if(st.countTokens() == 3)
                {

                    dataType = st.nextToken();
                    message = st.nextToken();
                    senderName = st.nextToken();
                }

                // PROTOCOLS
                //MESSAGE FORMAT: PROTOCOL#RECIPIENT
                if (message.equals("username"))
                {

                    currentClient.username = senderName;

                }
                else if (message.equals("addToActiveList"))
                {

                    if (!senderName.equals(currentClient.username))
                    {
                        listModel.addElement(senderName);
                    }

                }
                else if (message.equals("connectionRequest"))
                {

                    int res = JOptionPane.showConfirmDialog(rootPane, senderName + " wants to connect. Press 'Yes' to accept request.");
                    if (res == 0)
                    {
                        currentClient.sendMessage("requestAccepted#" + senderName);
                        chattingPartner = senderName;
                    }
                    else if (res == 1)
                    {
                        currentClient.sendMessage("requestDeclined#" + senderName);
                    }

                }
                else if (message.equals("requestDeclined"))
                {

                    JOptionPane.showMessageDialog(rootPane, "Sorry Cuzzy, " + senderName + " can't speak right now my china.");

                }
                else if (message.equals("requestAccepted"))
                {
                    if (chattingPartner.equals(""))
                    {
                        chatArea.setText("");
                        JOptionPane.showMessageDialog(rootPane, "Sweet Boetie, " + senderName + " is in the chat, let him know about the jol last night.");
                        chattingPartner = senderName;
                    }
                    else
                    {
                        currentClient.sendMessage("chatTerminated#" + chattingPartner);
                        chatArea.setText("");
                        JOptionPane.showMessageDialog(rootPane, "Sweet Boetie, " + senderName + " is in the chat, let him know about the jol last night.");
                        chattingPartner = senderName;
                    }

                }
                else if (message.equals("chatTerminated"))
                {

                    chatArea.setText(senderName + " has left the chat");

                    for (int i = 0; i < listModel.size(); i++)
                    {
                        if (listModel.get(i).equals(senderName))
                        {
                            listModel.remove(i);
                        }
                    }
                    chattingPartner = "";

                }
                else if (message.equals("messageDelivered"))
                {
                    try
                    {
                        Thread.sleep(500);
                    }
                    catch (InterruptedException e)
                    {
                        e.printStackTrace();
                    }
                    messageDelivered.setText(" Message Delivered");
                    messageDelivered.setVisible(true);
                    try
                    {
                        Thread.sleep(2000);
                    }
                    catch (InterruptedException e)
                    {
                        e.printStackTrace();
                    }
                    messageDelivered.setVisible(false);
                }

                else if (dataType.equals("fileTransferRequest"))
                {
                    int response = JOptionPane.showConfirmDialog(rootPane, chattingPartner + " wants to send you a " + message + " file, do you wanna spend your data on this cuzz?");
                    if (response == 0)
                    {
                        currentClient.sendMessage("fileTransferAccepted#" + chattingPartner);
                    }
                    else if (response == 1)
                    {
                        currentClient.sendMessage("fileTransferDeclined#" + chattingPartner);
                    }
                }
                else if (message.equals("fileTransferAccepted"))
                {
                    try
                    {
                        System.out.println("he accepted");
                        currentClient.sendMessage("fileNameForTransfer#"+file.getName()+"#"+chattingPartner);
                        currentClient.sendMessage("fileSize#"+file.length()+"#"+chattingPartner);
                        currentClient.sendFile(file);
                    }
                    catch (IOException ex)
                    {
                        Logger.getLogger(clientGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                else if (message.equals("fileTransferDeclined"))
                {
                    try
                    {
                        Thread.sleep(500);
                    }
                    catch (InterruptedException e)
                    {
                        e.printStackTrace();
                    }
                    messageDelivered.setText(" Your cuzzy doesn't have data right now, so he didn't download the file");
                    messageDelivered.setVisible(true);
                    try
                    {
                        Thread.sleep(2000);
                    }
                    catch (InterruptedException e)
                    {
                        e.printStackTrace();
                    }
                    messageDelivered.setVisible(false);
                }
                else if (message.equals("fileReceivedFromServer"))
                {
                    try
                    {
                        Thread.sleep(500);
                    }
                    catch (InterruptedException e)
                    {
                        e.printStackTrace();
                    }
                    messageDelivered.setText(" Your cuzzy downloaded the file");
                    messageDelivered.setVisible(true);
                    try
                    {
                        Thread.sleep(2000);
                    }
                    catch (InterruptedException e)
                    {
                        e.printStackTrace();
                    }
                    messageDelivered.setVisible(false);
                }
                else if (dataType.equals("fileNameFromServer"))
                    {
                        System.out.println("recipient got file name:" + message);
                        receivedFileName = message;                    
                    }
                else if (dataType.equals("fileSizeFromServer"))
                    {
                        System.out.println("recipient got file size:" + message);
                        receivedFileSize = Long.parseLong(message);
                    try
                    {
                        currentClient.receiveFile(receivedFileName, receivedFileSize);
                    }
                    catch (IOException ex)
                    {
                        Logger.getLogger(clientGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    }
                else if (message.equals("fileReceived"))
                {
                    try
                    {
                        Thread.sleep(500);
                    }
                    catch (InterruptedException e)
                    {
                        e.printStackTrace();
                    }
                    messageDelivered.setText(" Your cuzzy downloaded the file");
                    messageDelivered.setVisible(true);
                    try
                    {
                        Thread.sleep(2000);
                    }
                    catch (InterruptedException e)
                    {
                        e.printStackTrace();
                    }
                    messageDelivered.setVisible(false);
                }

                else if (recieved.equals("null"))
                {
                    //DO NOTHING                                           
                }
                else if (dataType.equals("chatMessage"))
                {
                    //IF CLIENT IS RECIEVING PLAIN TEXT MESSAGE FROM SENDER
                    if (senderName.equals(chattingPartner))
                    {
                        chatArea.append(chattingPartner + ": " + message + "\n");
                        currentClient.sendMessage("messageDelivered#" + chattingPartner);

                    }

                }
            }
        }
    });
   

    Thread logout = new Thread(new Runnable()
    {
        @Override
        public void run()
        {
            
            while (true)
            {
                if (!chattingPartner.equals(""))
                {
                    currentClient.sendMessage("chatTerminated#" + chattingPartner);
                    currentClient.sendMessage("logout");
                    break;
                }                
            }
        }

    });
    
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel attach;
    private javax.swing.JLabel attachedFileDisplay;
    private javax.swing.JTextArea chatArea;
    private javax.swing.JTextField clientInput;
    private javax.swing.JList clientList;
    private javax.swing.JButton connectionRequest;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel messageDelivered;
    private javax.swing.JLabel send;
    // End of variables declaration//GEN-END:variables
}
